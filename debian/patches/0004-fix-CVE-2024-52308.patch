Description: adding username validation to the invoker ssh server
 This is a fix for the gh codespace ssh and similar commands which
 retrieve the remote username from the running dev container on GitHub.
 If connecting to a malicious container image, it could trigger a
 remote code execution on the local system running gh by providing a
 username that includes additional command-line arguments to ssh. This
 patch adds validation to ensure that only a reasonable username is
 accepted from the container.
Author: Sarah Barili <sarahbarili@microsoft.com>
Origin: https://github.com/cli/cli/compare/e356c69..a02f845
Bug: https://github.com/cli/cli/security/advisories/GHSA-p2h2-3vg9-4p87
Bug-Debian: https://bugs.debian.org/1087883
Applied-Upstream: 2.62.0
Last-Update: 2024-12-29

--- a/internal/codespaces/rpc/invoker.go
+++ b/internal/codespaces/rpc/invoker.go
@@ -8,6 +8,7 @@
 	"fmt"
 	"net"
 	"os"
+	"regexp"
 	"strconv"
 	"strings"
 	"time"
@@ -242,6 +243,9 @@
 		return 0, "", fmt.Errorf("failed to parse SSH server port: %w", err)
 	}
 
+	if !isUsernameValid(response.User) {
+		return 0, "", fmt.Errorf("invalid username: %s", response.User)
+	}
 	return port, response.User, nil
 }
 
@@ -301,3 +305,10 @@
 
 	return nil
 }
+
+func isUsernameValid(username string) bool {
+	// assuming valid usernames are alphanumeric, with these special characters allowed: . _ -
+	var validUsernamePattern = `^[a-zA-Z0-9_][-.a-zA-Z0-9_]*$`
+	re := regexp.MustCompile(validUsernamePattern)
+	return re.MatchString(username)
+}
